# AI Rules for {{project-name}}

{{project-description}}

## Frontend

### Guidelines for React

#### React Router

- Use createBrowserRouter instead of BrowserRouter for better data loading and error handling
- Implement lazy loading with React.lazy() for route components to improve initial load time
- Use the useNavigate hook instead of the navigate component prop for programmatic navigation
- Leverage loader and action functions to handle data fetching and mutations at the route level
- Implement error boundaries with errorElement to gracefully handle routing and data errors
- Use relative paths with dot notation (e.g., "../parent") to maintain route hierarchy flexibility
- Utilize the useRouteLoaderData hook to access data from parent routes
- Implement fetchers for non-navigation data mutations
- Use route.lazy() for route-level code splitting with automatic loading states
- Implement shouldRevalidate functions to control when data revalidation happens after navigation

#### React Coding Standards

- Use functional components with hooks instead of class components
- Implement React.memo() for expensive components that render often with the same props
- Utilize React.lazy() and Suspense for code-splitting and performance optimization
- Use the useCallback hook for event handlers passed to child components to prevent unnecessary re-renders
- Prefer useMemo for expensive calculations to avoid recomputation on every render
- Implement useId() for generating unique IDs for accessibility attributes
- Use the new use hook for data fetching in React 19+ projects
- Leverage Server Components for {{data_fetching_heavy_components}} when using React with Next.js or similar frameworks
- Consider using the new useOptimistic hook for optimistic UI updates in forms
- Use useTransition for non-urgent state updates to keep the UI responsive

#### Zustand

- Create separate stores for distinct state domains instead of one large store
- Use immer middleware for complex state updates to maintain immutability when dealing with nested data
- Implement selectors to derive state and prevent unnecessary re-renders
- Leverage the persist middleware for automatic state persistence in localStorage or other storage
- Use TypeScript with strict typing for store definitions to catch errors at compile time
- Prefer shallow equality checks with useShallow for performance optimization in component re-renders
- Combine stores using composition for sharing logic between stores
- Implement subscriptions to react to state changes outside of React components
- Use devtools middleware for Redux DevTools integration in development
- Create custom hooks to encapsulate store access and related business logic

#### React Query

- Use TanStack Query (formerly React Query) with appropriate staleTime and gcTime based on data freshness requirements
- Implement the useInfiniteQuery hook for pagination and infinite scrolling
- Use optimistic updates for mutations to make the UI feel more responsive
- Leverage queryClient.setQueryDefaults to establish consistent settings for query categories
- Use suspense mode with <Suspense> boundaries for a more declarative data fetching approach
- Implement retry logic with custom backoff algorithms for transient network issues
- Use the select option to transform and extract specific data from query results
- Implement mutations with onMutate, onError, and onSettled for robust error handling
- Use Query Keys structuring pattern ([entity, params]) for better organization and automatic refetching
- Implement query invalidation strategies to keep data fresh after mutations


### Guidelines for Styling

#### Tailwind

- Use the @layer directive to organize styles into components, utilities, and base layers
- Implement Just-in-Time (JIT) mode for development efficiency and smaller CSS bundles
- Use arbitrary values with square brackets (e.g., w-[123px]) for precise one-off designs
- Leverage the @apply directive in component classes to reuse utility combinations
- Implement the Tailwind configuration file for customizing theme, plugins, and variants
- Use component extraction for repeated UI patterns instead of copying utility classes
- Leverage the theme() function in CSS for accessing Tailwind theme values
- Implement dark mode with the dark: variant
- Use responsive variants (sm:, md:, lg:, etc.) for adaptive designs
- Leverage state variants (hover:, focus:, active:, etc.) for interactive elements

#### Important 
- Don't use xhr, axios or fetch for API calls, use supabase client or useQuery


‚∏ª

‚úÖ Clean Architecture Guidelines for React + Supabase

üìÅ Folder Structure

src/
‚îú‚îÄ‚îÄ app/              # App initialization, routing, global configs
‚îú‚îÄ‚îÄ entities/         # Domain models (e.g. User, Post), types, interfaces
‚îú‚îÄ‚îÄ features/         # Grouped logic + UI per feature
‚îÇ   ‚îî‚îÄ‚îÄ auth/
‚îÇ       ‚îú‚îÄ‚îÄ components/
‚îÇ       ‚îú‚îÄ‚îÄ hooks/
‚îÇ       ‚îú‚îÄ‚îÄ services/
‚îÇ       ‚îî‚îÄ‚îÄ model.ts
‚îú‚îÄ‚îÄ shared/           # Reusable components and utilities
‚îú‚îÄ‚îÄ pages/            # Page-level components (for Next.js) or route entry points
‚îú‚îÄ‚îÄ widgets/          # Composite components that connect data + UI
‚îî‚îÄ‚îÄ processes/        # Multi-step flows built from features (e.g. registration)



‚∏ª

üîß Clean Architecture Layers

Layer	Description
Entities	Domain logic, data models, types ‚Äî pure layer.
Use Cases	Application logic ‚Äî e.g. registerUser.ts, uses Supabase internally.
Interface / UI	React components, hooks ‚Äî interface between user and system.
Infrastructure	Supabase client, API calls ‚Äî external dependencies.



‚∏ª

üîë Key Rules & Best Practices

1. Dependencies go only one way
	‚Ä¢	UI should not know about Supabase. It calls a useCase function like loginUser().
	‚Ä¢	Supabase can be swapped out (e.g. Firebase) without touching UI code.

2. Hooks as interface to use cases

// features/auth/hooks/useLogin.ts
export const useLogin = () => {
  return useMutation((data) => loginUser(data)); // loginUser = use case
};

3. Supabase is just an adapter

// shared/api/supabaseClient.ts
export const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

// features/auth/services/supabaseAuth.ts
export const signIn = async (email, password) => {
  const { data, error } = await supabase.auth.signInWithPassword({ email, password });
  if (error) throw new Error(error.message);
  return data;
};

4. Clean domain models

// entities/user.ts
export interface User {
  id: string;
  email: string;
  createdAt: string;
}

5. Avoid direct Supabase calls in components

‚ùå Bad:

const handleLogin = async () => {
  await supabase.auth.signInWithPassword(...);
};

‚úÖ Good:

const { mutate: login } = useLogin(); // login is a use case hiding Supabase logic



‚∏ª

üõ°Ô∏è Other Recommendations
	‚Ä¢	‚úÖ Use Zod or Yup to validate user input
	‚Ä¢	‚úÖ Handle errors properly with try/catch or useMutation onError
	‚Ä¢	‚úÖ Put app logic in features/*/services or dedicated useCases
	‚Ä¢	‚úÖ Build clean, reusable UI from shared/ui and widgets
	‚Ä¢	‚úÖ Separate side effects from logic (e.g., logic in hooks, not inside components)

‚∏ª

- Try simple solutions first 




